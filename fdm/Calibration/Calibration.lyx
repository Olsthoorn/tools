#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrreprt
\begin_preamble
% Any characters can be typed directly from the keyboard, eg éçñ
% provide lots of new symbols
% Add graphics capabilities
%\usepackage{epstopdf} % to include .eps graphics files with pdfLaTeX
\usepackage{flafter}% Don't place floats before their definition
%\usepackage{topcapt}   % Define \topcation for placing captions above tables (not in gwTeX)
%\usepackage{natbib} % use author/date bibliographic citations
\@ifundefined{definecolor}
 {\usepackage{color}}{}
% necessary to use colos
% Better maths support & more symbols
\usepackage{bm}% Define \bm{} to use bold math fonts
\usepackage[pdftex,bookmarks,colorlinks,breaklinks]{hyperref}% PDF hyperlinks, with coloured links
\definecolor{dullmagenta}{rgb}{0.4,0,0.4}% #660066
\definecolor{darkblue}{rgb}{0,0,0.4}\hypersetup{linkcolor=red,citecolor=blue,filecolor=dullmagenta,urlcolor=darkblue}% coloured links
%\hypersetup{linkcolor=black,citecolor=black,filecolor=black,urlcolor=black} % black links, for printed output
\usepackage{memhfixc}% remove conflict between the memoir class & hyperref
% \usepackage[activate]{pdfcprot}  % Turn on margin kerning (not in gwTeX)
\usepackage{pdfsync}% enable tex source and pdf output syncronicity
\usepackage{hyperref}

\usepackage{alltt}
\usepackage{color}
\definecolor{string}{rgb}{0.7,0.0,0.0}
\definecolor{comment}{rgb}{0.13,0.54,0.13}
\definecolor{keyword}{rgb}{0.0,0.0,1.0}

\usepackage{listings}
\definecolor{mygreen}{RGB}{28,172,0} % color values Red, Green, Blue
\definecolor{mylilas}{RGB}{170,55,241}


\newtheorem{issue}{Issue}

\lstset{language=Matlab,%
    %basicstyle=\color{red},
    breaklines=true,%
    morekeywords={matlab2tikz},
    keywordstyle=\color{blue},%
    morekeywords=[2]{1}, keywordstyle=[2]{\color{black}},
    identifierstyle=\color{black},%
    stringstyle=\color{mylilas},
    commentstyle=\color{mygreen},%
    showstringspaces=false,%without this there will be a symbol in the places where there is a space
    numbers=left,%
    numberstyle={\tiny \color{black}},% size of the numbers
    numbersep=9pt, % this defines how far the numbers are from the text
    emph=[1]{for,end,break},emphstyle=[1]\color{red}, %some words to emphasise
    %emph=[2]{word1,word2}, emphstyle=[2]{style},    
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Calibration by minimizing a chosen objective function
\end_layout

\begin_layout Standard
To mimimize overhead we may implement the function that computes the objective
 function as a co-routine that yields results upon demand and can be resumed
 with a new parameter set.
\end_layout

\begin_layout Standard
So we have a set of parameters p that drives the function.
 The function wraps the model input preparation and the model accepting
 the parameter set.
 It yields the computed values that are immediately converted into the objective
 function result.
 Doing this, results in a jacobian and, therefore, a sensitivity analysis.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

params = [k1, k2, k3, c]
\end_layout

\begin_layout Plain Layout

measurements = e
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

delta = 0.1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def convert(params):
\end_layout

\begin_layout Plain Layout

	'''Return dict containing the model data'''
\end_layout

\begin_layout Plain Layout

	modelInput = dict()
\end_layout

\begin_layout Plain Layout

	modelInput['k'] = gr.const([k1, k3])
\end_layout

\begin_layout Plain Layout

	modelInput['k'][:, underVeen] = k2
\end_layout

\begin_layout Plain Layout

	modelInput['c'][:, underVeen] = c
\end_layout

\begin_layout Plain Layout

	etc
\end_layout

\begin_layout Plain Layout

	return modelInput
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

jac = np.zeros((len(err), len(params))
\end_layout

\begin_layout Plain Layout

def get_jac(params, delta):
\end_layout

\begin_layout Plain Layout

	'''return jacobian'''
\end_layout

\begin_layout Plain Layout

	modelInput = convert(params)
\end_layout

\begin_layout Plain Layout

	for parSet in Parsets(params):
\end_layout

\begin_layout Plain Layout

		may need a model-output extracter.
\end_layout

\begin_layout Plain Layout

		You could do that by a zone model to peek into an array.
\end_layout

\begin_layout Plain Layout

		But for flow, a zone array will be simplest.
\end_layout

\begin_layout Plain Layout

		And for head array, coordinates will be.
\end_layout

\begin_layout Plain Layout

		These can be methods of a class called Calibrated_model
\end_layout

\begin_layout Plain Layout

		modelOuput, i = yield from model(**parSet)
\end_layout

\begin_layout Plain Layout

		for head get the dataat the measurement points
\end_layout

\begin_layout Plain Layout

			(perhasps over all times)
\end_layout

\begin_layout Plain Layout

		for flow get the sum over defined zones
\end_layout

\begin_layout Plain Layout

		jac[i] = convertTo(modelOutput)
\end_layout

\begin_layout Plain Layout

jac =np.array([jac[i] - jac[0], for i in range(1, len(jac))])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def modelRunner(params, meas)
\end_layout

\begin_layout Plain Layout

	modelInput = convert(params)
\end_layout

\begin_layout Plain Layout

	modelOuptut = model(modelInput)
\end_layout

\begin_layout Plain Layout

	y= interpolate(modelOuput.phi, points) - meas
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Calibrated_model:
\end_layout

\begin_layout Plain Layout

	__init__(self, params, log=[], delta=0.1, zone=None,
\end_layout

\begin_layout Plain Layout

		coords=None,
\end_layout

\begin_layout Plain Layout

		meas=None)
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
