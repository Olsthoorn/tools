#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass memoir
\begin_preamble
% Any characters can be typed directly from the keyboard, eg éçñ
% provide lots of new symbols
% Add graphics capabilities
%\usepackage{epstopdf} % to include .eps graphics files with pdfLaTeX
\usepackage{flafter}% Don't place floats before their definition
%\usepackage{topcapt}   % Define \topcation for placing captions above tables (not in gwTeX)
%\usepackage{natbib} % use author/date bibliographic citations
\@ifundefined{definecolor}
 {\usepackage{color}}{}
% necessary to use colos
% Better maths support & more symbols
\usepackage{bm}% Define \bm{} to use bold math fonts
\usepackage[pdftex,bookmarks,colorlinks,breaklinks]{hyperref}% PDF hyperlinks, with coloured links
\definecolor{dullmagenta}{rgb}{0.4,0,0.4}% #660066
\definecolor{darkblue}{rgb}{0,0,0.4}\hypersetup{linkcolor=red,citecolor=blue,filecolor=dullmagenta,urlcolor=darkblue}% coloured links
%\hypersetup{linkcolor=black,citecolor=black,filecolor=black,urlcolor=black} % black links, for printed output
\usepackage{memhfixc}% remove conflict between the memoir class & hyperref
% \usepackage[activate]{pdfcprot}  % Turn on margin kerning (not in gwTeX)
\usepackage{pdfsync}% enable tex source and pdf output syncronicity
\usepackage{hyperref}

\usepackage{alltt}
\usepackage{color}
\definecolor{string}{rgb}{0.7,0.0,0.0}
\definecolor{comment}{rgb}{0.13,0.54,0.13}
\definecolor{keyword}{rgb}{0.0,0.0,1.0}

\usepackage{listings}
\definecolor{mygreen}{RGB}{28,172,0} % color values Red, Green, Blue
\definecolor{mylilas}{RGB}{170,55,241}


\newtheorem{issue}{Issue}

\lstset{language=Matlab,%
    %basicstyle=\color{red},
    breaklines=true,%
    morekeywords={matlab2tikz},
    keywordstyle=\color{blue},%
    morekeywords=[2]{1}, keywordstyle=[2]{\color{black}},
    identifierstyle=\color{black},%
    stringstyle=\color{mylilas},
    commentstyle=\color{mygreen},%
    showstringspaces=false,%without this there will be a symbol in the places where there is a space
    numbers=left,%
    numberstyle={\tiny \color{black}},% size of the numbers
    numbersep=9pt, % this defines how far the numbers are from the text
    emph=[1]{for,end,break},emphstyle=[1]\color{red}, %some words to emphasise
    %emph=[2]{word1,word2}, emphstyle=[2]{style},    
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Converting from WGS to Google Maps and RD
\end_layout

\begin_layout Author
T.N.Olsthoorn
\end_layout

\begin_layout Date
2018-07-19
\end_layout

\begin_layout Section*
The problem
\end_layout

\begin_layout Standard
It is easy to request an get an image map from Google Maps using the appropriate
 URL as described in their tutorials.
 It's convenient to use such a map as a background to show data, for example
 in Google or in PowerPoint.
 The problem is how to match the use coordinates with those of the pixels
 in the map.
\end_layout

\begin_layout Standard
Google maps works met zoom levels and tiles.
 Each higher zoom level divides each tile of the current zoom level into
 4 smaller ones by halving the horizontal and vertical size.
 Also, each tile has 
\begin_inset Formula $256\times256$
\end_inset

 pixels, which is its resolution.
 Note that one can request maps up to 
\begin_inset Formula $640\times640$
\end_inset

 pixels centered to an arbitrary center and for a given zoom level.
 Google's zoom levels range form 0 = the globe to 21.
 So, at zoom level 0, the globe is divided into one tile of 
\begin_inset Formula $256\times256$
\end_inset

 pixels.
 At zoom level 21, the number of tiles is 
\begin_inset Formula $2^{21}\times2^{21}=2097152\times2097156$
\end_inset

 and the number of pixels in total is 
\begin_inset Formula $256\times2^{21}$
\end_inset

 by 
\begin_inset Formula $256\times2^{21}$
\end_inset

=
\begin_inset Formula $536870912\times536870912$
\end_inset

.
 The size of the smallest tiles at the equator are then, with 
\begin_inset Formula $r_{earth}=6378137$
\end_inset

 m is then 
\begin_inset Formula $19.1\times19.1$
\end_inset

 m and its pixel 
\begin_inset Formula $0.075\times0.075$
\end_inset

 m.
 Of course, the pixel size varies with latitude, in accordance with the
 projection.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The projection:
\end_layout

\begin_layout Plain Layout
Spherical Mercator EPGS:900913 (EPSG:3857) and WGS84 Datum
\end_layout

\begin_layout Plain Layout
It can also be referenced as EPSG:4326 when directly projected by Platte
 Carre.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Google maps uses the Mercator projection, that is, the globe is projected
 on a cylinder around the earth, which it touches at the equator.
 It uses the so-called Spherical Normal (equatorial) variant of the Mercator
 projection.
 Due to exaggeration of high latitudes, due to which Greenland shows about
 the size of Africa, about 15 larger than it is, Google maps cannot show
 above +85 and below -85 latitudes.
 The current projection preserves angles (street angles) but stretches lines
 in EW direction compared to those in NS direction, and more so, the more
 north and south one is on the globe.
\end_layout

\begin_layout Section*
Mercator projection
\end_layout

\begin_layout Standard
With 
\begin_inset Formula $\Omega$
\end_inset

 the circumference of the globe and 
\begin_inset Formula $R$
\end_inset

 its radius, or the map paper length and the radius of the globus respectively,
 we can express the 
\begin_inset Formula $x$
\end_inset

 coordinate relative to the datum line (-180 degrees or 
\begin_inset Formula $-\pi$
\end_inset

 radians) as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
x=R\left(\lambda+\pi\right)=\frac{\Omega}{2\pi}\left(\lambda+\pi\right)=\Omega\left(\frac{lon+180}{360}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\lambda$
\end_inset

 in radians and 
\begin_inset Formula $lon$
\end_inset

 in the degrees (longitude).
\end_layout

\begin_layout Standard
Remember that 
\begin_inset Formula $\Omega=2\pi R$
\end_inset

 can best be regarded as the length of the map.
\end_layout

\begin_layout Standard
Note that 
\begin_inset Formula $x$
\end_inset

 is not in km on the globe, but in km on the map, i.e.
 the projected globe, which is completely different.
 To relate the map and the globe we have for the 
\begin_inset Formula $x$
\end_inset

 direction parallel to the equator
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{dx}{dlon}=\frac{\Omega}{360}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{dx}{d\lambda}=\frac{\Omega}{2\pi}
\]

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $y$
\end_inset

 coordinate is the projection from the center of the globe onto the cylindrical
 map touching it at the equator.
 The projection is chosen so that angles are preserved as well as length
 ratios at different angles (Mercator Projection, Wikipedia).
 From the analysis given there, we obtain
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=R\ln\left(\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right)=\frac{\Omega}{2\pi}\ln\left(\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right)=\frac{\Omega}{2\pi}\ln\left(\tan\left(\frac{\pi}{360}\left(90+lat\right)\right)\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The difference between two values of 
\begin_inset Formula $y$
\end_inset

 which we need for sub-maps is obtained as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=\frac{\Omega}{2\pi}\ln\left(\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y_{2}-y_{1}=\frac{\Omega}{2\pi}\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{2}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
With Google maps, the globe is subdivided in tiles and each tile in 256x256
 pixels.
 At any zoom level, 
\begin_inset Formula $z$
\end_inset

, the circumference of the map thus has length 
\begin_inset Formula $256\times2^{z}$
\end_inset

 in pixels.
 Hence the number of pixels between two latitude equals
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
npy=\frac{256\times2^{z}}{2\pi}\ln\left(\frac{\tan\left(\frac{\pi}{2}+\frac{\phi_{2}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The idea is to choose a proper zoom level, one that covers our map within
 the maximum number of pixels allowed for downloading by Google, which is
 640.
 Hence to get the zoom level, it can be made explicit from the previous
 expression
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\ln\left(\frac{\tan\left(\frac{\pi}{2}+\frac{\phi_{2}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}\right)\le2\pi\frac{npy}{256}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
z\ln2+\ln\left[\ln\left(\frac{\tan\left(\frac{\pi}{2}+\frac{\phi_{2}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}\right)\right]\le\ln\left(2\pi\frac{npy}{256}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
z\le\frac{\ln\left(2\pi\frac{npy}{256}\right)-\ln\left[\ln\left(\frac{\tan\left(\frac{\pi}{2}+\frac{\phi_{2}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}\right)\right]}{\ln2}
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\phi$
\end_inset

 in radians upward from the equator.
 Here, too, 
\begin_inset Formula $y$
\end_inset

 has no direct relation with distance on the globe, it is the distance on
 the map (i.e.
 on paper).
 We can just limit 
\begin_inset Formula $y$
\end_inset

 to 
\begin_inset Formula $\pm\Omega/2$
\end_inset

 so that the map will be square on paper.
 This yields the maximum value of 
\begin_inset Formula $\phi$
\end_inset

.
 The map would be a square on paper, a square tile, which can be subdivided
 in 4 equal sized tiles as often as desired.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
y=\frac{\Omega}{2}=\frac{\Omega}{2\pi}\ln\left(\tan\left(\frac{\pi}{4}+\frac{\phi_{max}}{2}\right)\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\phi_{max} & =2\arctan\left(\exp\pi\right)-\frac{\pi}{2}\\
\phi_{max} & =1.4844\,rad=85.0511^{o}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Which is indeed the cutoff applied by Google maps.
\end_layout

\begin_layout Standard
The derivative 
\begin_inset Formula $dy/dlat$
\end_inset

 or 
\begin_inset Formula $dy/d\phi$
\end_inset

gives the stretching 
\begin_inset Formula $y$
\end_inset

 with latitude.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\frac{dy}{d\phi} & =\frac{\Omega}{2\pi}\frac{1}{\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)}\frac{1}{\cos^{2}\left(\frac{\pi}{4}+\frac{\phi}{2}\right)}\frac{1}{2}\\
 & =\frac{\Omega}{2\pi}\frac{1}{2\,\sin\left(\frac{\pi}{4}+\frac{\phi}{2}\right)}\frac{1}{\cos\left(\frac{\pi}{4}+\frac{\pi}{2}\right)}\\
 & =\frac{\Omega}{2\pi}\frac{1}{\sin\left(\frac{\pi}{2}+\phi\right)}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
or, using degrees:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
\frac{dy}{dlat\frac{\pi}{180}} & =\frac{\Omega}{2\pi}\frac{1}{\sin\left(\frac{\pi}{180}\left(90+lat\right)\right)}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Or, likewise,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{dy}{d\phi}=\frac{\Omega}{2\pi}\frac{1}{\sin\left(\frac{\pi}{2}+\phi\right)}
\]

\end_inset

c
\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\phi$
\end_inset

 latitude in radians as opposed to latitude in degrees.
\end_layout

\begin_layout Standard
This projection has equality of angles and equality of scale factors (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Mercator_projection
\end_layout

\end_inset

)
\end_layout

\begin_layout Section*
Google maps
\end_layout

\begin_layout Standard
Google maps uses this Mercator projection.
 But it divides the glob in tiles, where the number of tiles depends on
 the zoom level as explained above.
 Each tile at every zoom level has 256x256 pixels.
 Hence, the circumference of the globe in Google maps in pixels depending
 on the zoom level is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Omega_{px}=256\times2^{z}
\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $z$
\end_inset

 an integer value between 0 and 21
\end_layout

\begin_layout Standard
In Google the pixel coordinate thus becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
px=256\times2^{z}\left(\frac{\lambda+\pi}{2\pi}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\lambda=0$
\end_inset

 at the Greenwich meridian.
\end_layout

\begin_layout Standard
Similarly, for the latitude, for the vertical pixel coordinate we get due
 to the Mercator projection 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
py=256\times2^{z}\left(\ln\left[\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right]\right)
\]

\end_inset


\end_layout

\begin_layout Standard
These formulas can be used to convert Google maps pixel coordinates to WGS
 and vice versa.
\end_layout

\begin_layout Standard
The number of pixels between points denoted by 
\begin_inset Formula $\lambda_{0}$
\end_inset

 and 
\begin_inset Formula $\lambda_{1}$
\end_inset

becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
px_{1}-px_{0}=256\times2^{z}\left(\frac{\lambda_{1}-\lambda_{0}}{2\pi}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
and, likewise,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
py_{1}-py_{0}=\frac{256\times2^{z}}{2\pi}\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)=2\pi\frac{npx}{256}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)=2\pi\frac{npx}{256}2^{-z}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}=\exp\left(2\pi\frac{npx}{256}2^{-z}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)=\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\phi=2\arctan\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)\right]-\frac{\pi}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat\frac{\pi}{180}=2\arctan\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)\right]-\frac{\pi}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat=\frac{360}{\pi}\arctan\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)\right]-90
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat=\frac{360}{\pi}\arctan\left[\tan\left(\frac{\pi}{4}+lat_{c}\frac{\pi}{360}\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)\right]-90
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat=\frac{360}{\pi}\arctan\left[\tan\left(\frac{\pi}{360}\left(90+lat_{c}\right)\right)\exp\left(2\pi\frac{npx}{256}2^{-z}\right)\right]-90
\]

\end_inset


\end_layout

\begin_layout Standard
The other way around, i.e.
 getting lon and lat when px an py are given:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{lon_{1}-lon_{0}}{360}=\frac{\lambda_{1}-\lambda_{0}}{2\pi}=\frac{2^{-z}}{256}\left(px_{1}-px_{0}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
When 
\begin_inset Formula $lon_{0}$
\end_inset

 is the map center, where 
\begin_inset Formula $px_{0}=0$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lon_{1}=lon_{center}+360\times\frac{px_{1}}{256}2^{-z}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)=\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left[\frac{2^{-z}}{256}\left(py_{1}-py_{0}\right)\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{\phi_{1}}{2}=\tan^{-1}\left(\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\exp\left[\frac{2^{-z}}{256}\left(py_{1}-py_{0}\right)\right]\right)-\frac{\pi}{4}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat\frac{\pi}{360}=\frac{\phi_{1}}{2}=\tan^{-1}\left(\tan\left(\frac{\pi}{4}+lat_{0}\frac{\pi}{360}\right)\exp\left[\frac{py}{256}2^{-z}\right]\right)-\frac{\pi}{4}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
lat=\frac{360}{\pi}\tan^{-1}\left(\tan\left(\frac{\pi}{4}+lat_{0}\frac{\pi}{360}\right)\exp\left[\frac{py}{256}2^{-z}\right]\right)-90
\]

\end_inset


\end_layout

\begin_layout Section*
Application
\end_layout

\begin_layout Standard
Assume we request a Google map using the Google API and specify its center
 in WGS coordinates (lon, lat /
\begin_inset Formula $\lambda,\phi$
\end_inset

, i.e.
 easting and northing), it's zoom level and its size, that is, the number
 of pixels in EW and NS direction, noting that sizes up to 640x640 are allowed
 without payment.
 Also, let's assume that we want to cover our area by only one such image.
 Let the area be defined by 
\begin_inset Formula $\lambda_{1},\lambda_{2},\phi_{1},\phi_{2}$
\end_inset

 Then we could computed the pixels at the highest zoomlevels that match
 with these coordinates.
 Then see what zoom level would cover these coordinates given the maximum
 allowed size of the image.
 We could adjust the size so that the requested image fits as well as possible
 to our coordinates and, having done this, adapt the coordinates to exactly
 match the extents of the obtained image.
\end_layout

\begin_layout Standard
It should immediately be noted that the horizontal length of the picture
 is the same in terms of 
\begin_inset Formula $\lambda$
\end_inset

, it is not so in terms of meters.
 When we convert to meters, it may be best to accept the coordinates of
 the image width and height for the lines that pass through its center.
\end_layout

\begin_layout Standard
So
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
px\left(\lambda_{1}\right)-px\left(\lambda_{0}\right) & \le npx_{max}=640\\
py\left(\phi_{1}\right)-py\left(\phi_{0}\right) & \le npy_{max}=640
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection*
Longitude
\end_layout

\begin_layout Standard
For the longitude (easting) we obtain
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\times256\times\left(\frac{\lambda_{1}-\lambda_{0}}{2\pi}\right)\le npx_{max}
\]

\end_inset


\end_layout

\begin_layout Standard
yielding
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\le\frac{npx_{max}}{256}\left[\frac{2\pi}{\lambda_{1}-\lambda_{0}}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
So that the zoom level becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
z\le\frac{\ln\left[\frac{npx_{max}}{256}\frac{2\pi}{\lambda_{1}-\lambda_{0}}\right]}{\ln2}
\]

\end_inset


\end_layout

\begin_layout Standard
And then obtain the required number of pixels using 
\begin_inset Formula $\zeta$
\end_inset

, the rounded down value of 
\begin_inset Formula $z$
\end_inset

 as it must be an integer between 0 and 21.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
npx=256\times2^{\zeta}\left(\frac{\lambda_{1}-\lambda_{0}}{2\pi}\right)
\]

\end_inset


\end_layout

\begin_layout Subsection*
Latitude
\end_layout

\begin_layout Standard
For the 
\begin_inset Formula $y$
\end_inset

 direction:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\times256\times\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)\le npy_{max}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\le\frac{npy_{max}/256}{\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
z\le\frac{\ln\left[\frac{npy_{max}/256}{\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)}\right]}{\ln2}
\]

\end_inset


\end_layout

\begin_layout Standard
Again, we get the zoom level by rounding the value of 
\begin_inset Formula $z$
\end_inset

 down to a whole number 
\begin_inset Formula $\zeta$
\end_inset

.
\end_layout

\begin_layout Standard
To match the number of pixels as adequately as possible to our desired size
 we have
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
npy=256\times2^{\zeta}\ln\left(\frac{\tan\left(\frac{\pi}{4}+\frac{\phi_{1}}{2}\right)}{\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)}\right)
\]

\end_inset


\end_layout

\begin_layout Section*
Getting the WGS from pixel coordinates
\end_layout

\begin_layout Standard
This is useful because we want to compute for instance the exact WGS coordinates
 of the extents of an image of which we know its center, zoom level and
 size in pixels.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
px=\frac{256}{2\pi}2^{zoomlevel}\left(\lambda+\pi\right)
\]

\end_inset


\end_layout

\begin_layout Standard
So that with 
\begin_inset Formula $\lambda_{0},\,px_{0}$
\end_inset

 known value (i.e.
 here the center of the image).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\frac{256}{2\pi}\left(\lambda-\lambda_{c}\right)=px-px_{0}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\lambda=\lambda_{c}+\frac{2\pi}{256}\left(px-px_{0}\right)2^{-z}
\]

\end_inset


\end_layout

\begin_layout Standard
Similarly for the latitude direction, assuming we know 
\begin_inset Formula $\phi_{0}$
\end_inset

and 
\begin_inset Formula $py_{0}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
2^{z}\frac{256}{2\pi}\left(\frac{\ln\left[\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right]}{\ln\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\right]}\right)=py-py_{0}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\ln\left[\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)\right]=\frac{2\pi}{256}\left(py-py_{0}\right)\ln\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\right]2^{-z}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\tan\left(\frac{\pi}{4}+\frac{\phi}{2}\right)=\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\right]\exp\left[\frac{2\pi}{256}\left(py-py_{0}\right)2^{-z}\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\phi=\arctan\left(\left[\tan\left(\frac{\pi}{4}+\frac{\phi_{0}}{2}\right)\right]\exp\left[\frac{2\pi}{256}\left(py-py_{0}\right)2^{-z}\right]\right)-\frac{\pi}{2}
\]

\end_inset


\end_layout

\begin_layout Standard
These formulas are straightforward an allow immediate conversion of the
 
\begin_inset Formula $\lambda,\,\phi$
\end_inset

coordinates to 
\begin_inset Formula $px,py$
\end_inset

 coordinates and the other way around.
\end_layout

\end_body
\end_document
