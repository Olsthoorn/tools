# Plot kwargs and plot kwarg text for convenience.
# See __all__ at the bottom.

plot_kw = {
  'agg_filter': "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array",
  'alpha': "scalar or None",
  'animated': "bool",
  'antialiased or aa': "bool",
  'clip_box': "Bbox",
  'clip_on': "bool",
  'clip_path': "Patch or (Path, Transform) or None",
  'color': "color",
  'c': "color",
  'contains': "unknown",
  'dash_capstyle': "CapStyle or {'butt', 'projecting', 'round'}",
  'dash_joinstyle': "JoinStyle or {'miter', 'round', 'bevel'}",
  'dashes': "sequence of floats (on/off ink in points) or (None, None)",
  'data': "(2, N) array or two 1D arrays",
  'drawstyle': "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}", 
  'ds': "{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}", 
  'figure': "Figure",
  'fillstyle': "{'full', 'left', 'right', 'bottom', 'top', 'none'}",
  'gid': "str",
  'in_layout': "bool",
  'label': "object",
  'linestyle':  "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}",
  'ls': "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}",
  'linewidth': "float",
  'lw': "float",
  'marker': "marker style string, Path or MarkerStyle",
  'markeredgecolor': "color",
  'mec': "color",
  'markeredgewidth': "float",
  'mew': "float",
  'markerfacecolor': "color",
  'mfc': "color",
  'markerfacecoloralt': "color",
  'mfcalt': "color",
  'markersize': "float",
  'ms': "float",
  'markevery': "None or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]",
  'path_effects': "AbstractPathEffect",
  'picker': "float or callable[[Artist, Event], tuple[bool, dict]]",
  'pickradius': "float",
  'rasterized': "bool",
  'sketch_params': "(scale: float, length: float, randomness: float)",
  'snap': "bool or None",
  'solid_capstyle': "CapStyle or {'butt', 'projecting', 'round'}",
  'solid_joinstyle': "JoinStyle or {'miter', 'round', 'bevel'}",
  'transform': "matplotlib.transforms.Transform",
  'url': "str",
  'visible': "bool",
  'xdata': "1D array",
  'ydata': "1D array",
  'zorder': "float",
}

text_kw = {
    'agg_filter': "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array",
    'alpha': "scalar or None",
    'animated': "bool",
    'backgroundcolor': "color",
    'bbox': "dict with properties for patches.FancyBboxPatch",
    'clip_box': "Bbox",
    'clip_on': "bool",
    'clip_path': "Patch or (Path, Transform) or None",
    'color': "color",
    'c': "color",
    'contains': "unknown",
    'figure': "Figure",
    'fontfamily': "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}",
    'family': "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}",
    'fontproperties': "font_manager.FontProperties or str or pathlib.Path",
    'font': "font_manager.FontProperties or str or pathlib.Path",
    'font_properties': "font_manager.FontProperties or str or pathlib.Path",
    'fontsize': "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}",
    'size': "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}",
    'fontstretch': "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded',, 'ultra-expanded'}",
    'stretch': "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}",
    'fontstyle': "{'normal', 'italic', 'oblique'}",
    'style': "{'normal', 'italic', 'oblique'}",
    'fontvariant': "{'normal', 'small-caps'}",
    'variant': "{'normal', 'small-caps'}",
    'fontweight': "{a numeric value in range 0-1000, 'ultralight', 'light',   'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}",
    'weight': "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}",
    'gid': "str",
    'horizontalalignment': "{'center', 'right', 'left'}",
    'ha': "{'center', 'right', 'left'}",
    'in_layout': "bool",
    'label': "object",
    'linespacing': "float (multiple of font size)",
    'math_fontfamily': "str",
    'multialignment': "{'left', 'right', 'center'}",
    'ma': "{'left', 'right', 'center'}",
    'path_effects': "AbstractPathEffect",
    'picker': "None or bool or float or callable",
    'position': "(float, float)",
    'rasterized': "bool",
    'rotation': "float or {'vertical', 'horizontal'}",
    'rotation_mode': "{None, 'default', 'anchor'}",
    'sketch_params': "(scale: float, length: float, randomness: float)",
    'snap': "bool or None",
    'text': "object",
    'transform': "Transform",
    'transform_rotates_text': "bool",
    'url': "str",
    'usetex': "bool or None",
    'verticalalignment or va': "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}",
    'visible': "bool",
    'wrap': "bool",
    'x': "float",
    'y': "float",
    'zorder': "float",
}


__all__ =[name for name in locals() if callable(locals()[name])
           and not name.startswith('_')]
