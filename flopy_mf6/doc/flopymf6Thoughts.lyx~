#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
% Any characters can be typed directly from the keyboard, eg éçñ
% provide lots of new symbols
% Add graphics capabilities
%\usepackage{epstopdf} % to include .eps graphics files with pdfLaTeX
\usepackage{flafter}% Don't place floats before their definition
%\usepackage{topcapt}   % Define \topcation for placing captions above tables (not in gwTeX)
%\usepackage{natbib} % use author/date bibliographic citations
\@ifundefined{definecolor}
 {\usepackage{color}}{}
% necessary to use colos
% Better maths support & more symbols
\usepackage{bm}% Define \bm{} to use bold math fonts
\usepackage[pdftex,bookmarks,colorlinks,breaklinks]{hyperref}% PDF hyperlinks, with coloured links
\definecolor{dullmagenta}{rgb}{0.4,0,0.4}% #660066
\definecolor{darkblue}{rgb}{0,0,0.4}\hypersetup{linkcolor=red,citecolor=blue,filecolor=dullmagenta,urlcolor=darkblue}% coloured links
%\hypersetup{linkcolor=black,citecolor=black,filecolor=black,urlcolor=black} % black links, for printed output
\usepackage{memhfixc}% remove conflict between the memoir class & hyperref
% \usepackage[activate]{pdfcprot}  % Turn on margin kerning (not in gwTeX)
\usepackage{pdfsync}% enable tex source and pdf output syncronicity
\usepackage{hyperref}

\usepackage{alltt}
\usepackage{color}
\definecolor{string}{rgb}{0.7,0.0,0.0}
\definecolor{comment}{rgb}{0.13,0.54,0.13}
\definecolor{keyword}{rgb}{0.0,0.0,1.0}

\usepackage{listings}
\definecolor{mygreen}{RGB}{28,172,0} % color values Red, Green, Blue
\definecolor{mylilas}{RGB}{170,55,241}


\newtheorem{issue}{Issue}

\lstset{language=Matlab,%
    %basicstyle=\color{red},
    breaklines=true,%
    morekeywords={matlab2tikz},
    keywordstyle=\color{blue},%
    morekeywords=[2]{1}, keywordstyle=[2]{\color{black}},
    identifierstyle=\color{black},%
    stringstyle=\color{mylilas},
    commentstyle=\color{mygreen},%
    showstringspaces=false,%without this there will be a symbol in the places where there is a space
    numbers=left,%
    numberstyle={\tiny \color{black}},% size of the numbers
    numbersep=9pt, % this defines how far the numbers are from the text
    emph=[1]{for,end,break},emphstyle=[1]\color{red}, %some words to emphasise
    %emph=[2]{word1,word2}, emphstyle=[2]{style},    
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Flopy mf6 thoughts
\end_layout

\begin_layout Author
T.N.Olsthoorn
\end_layout

\begin_layout Date
11 April 2022
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Working with flopy often is frustrating as it feels mind-blowing complex
 at times.
 To get more grip on the design basics, this document collects thoughts
 on working with flopy and tries to crack down some of its complexity.
 Many examples in the flopy tutorials seem simple, yet, in reality, are
 not.
 This is mainly because a large number of flopy module options that are
 used in the flopy examples seem to drop out of the blue sky, without providing
 the user the ability to internalize its design philosophy.
 This has as a consequence that he/she can hardly build a mental knowledge
 tree that allows to give all items their place and thus allow maintaining
 some oversight.
 The idea behind this document to provide some aid.
\end_layout

\begin_layout Standard
Flopy is built around Modflow 6, the framework of which is documented in
 
\begin_inset CommandInset citation
LatexCommand cite
key "MF6-Framework"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Within the MODFLOW 6 framework, a simulation consists of a single forward
 run, which may include multiple models.
 The simulation is the highest level component and is controlled by the
 main program.
 A simulation contains several modules shown next to each other in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-diagram-showing-simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 A component may be a module, an object, a subroutine, or a collection of
 these, each handling a part of the program's function.
\end_layout

\begin_layout Enumerate
The 
\emph on
TimingModule
\emph default
 divides the simulation period into time steps and stress periods.
 The 
\emph on
TimingModule
\emph default
 also sets a flag for the last time step of a stress period and the last
 time step of the simulation.
\end_layout

\begin_layout Enumerate
A 
\emph on
solution
\emph default
 solves one or more models together with their mututal exchanges.
 The 
\emph on
NumericalSolutionType
\emph default
 is one type of 
\emph on
solution
\emph default
 available in the MODFLOW 6 framework.
 The downward arrow between 
\emph on
BaseSolutionType
\emph default
 and 
\emph on
NumericalSolutionType
\emph default
 is used to denote that 
\emph on
NumericalSolutionType
\emph default
 is a subclass of 
\emph on
BaseSolutionType
\emph default
.
 The 
\emph on
NumericalSolutionType
\emph default
 was designed specifically to solve one or more numerical models, such as
 the GWF Model, a 
\emph on
GwfModelType
\emph default
, which are subclasses of 
\emph on
NumericalModelType
\emph default
.
 The 
\emph on
NumericalSolutionType
\emph default
 can also represent exchange terms between mutually connected numerical
 models.
 These exchanges must be subclasses of 
\emph on
NumericalExchangeType
\emph default
.
 
\end_layout

\begin_layout Enumerate
Three separate model components are shown next to eachother in Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-diagram-showing-simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Each one of these components represents a Flopy/Python 
\emph on
class
\emph default
.
 The arrows between these classes indicate inheritance starting with the
 
\emph on
BaseModelType
\emph default
 and extending down to the 
\emph on
NumericalModelType
\emph default
, and ending with the 
\emph on
GwfModelType
\emph default
, which defines the GWF Model described in Langevin and others (2017).
 
\emph on
BaseModelType
\emph default
 defines the members and methods shared by all models within the framework.
 
\emph on
NumericalModelType
\emph default
 defines members and methods shared by all numerical models.
 Models that inherit from 
\emph on
NumericalModelType
\emph default
 can be solved by 
\emph on
NumericalSolutionType
\emph default
.
\end_layout

\begin_layout Enumerate

\emph on
Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-diagram-showing-simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset


\emph default
 also shows three separate exchange types.
 
\emph on
BaseExchangeType
\emph default
 is the superclass for all exchanges.
 
\emph on
NumericalExchangeType
\emph default
 defines exchanges between any two numerical models.
 The 
\emph on
GwfExchangeType
\emph default
 defines the exchange between two GWF Models.
 A simulation can include as many exchanges as necessary to define the problem.
\end_layout

\begin_layout Enumerate
Lastly, Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schematic-diagram-showing-simulation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows several of the important utility components, which are described
 in the report.
 These include observation utility (
\emph on
ObservationType
\emph default
), the time-series and time-array series utilities (
\emph on
TimeSeriesType
\emph default
 and 
\emph on
TimeArraySeriesType
\emph default
, respectively), and the memory manager utility (
\emph on
MemoryManagerType
\emph default
).
\end_layout

\begin_layout Enumerate
The framework also includes many other minor utilities for reading and writing
 arrays, parsing strings, and so forth, but those minor utilities are not
 described in this report.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename simulation_components.png
	lyxscale 50
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schematic-diagram-showing-simulation"

\end_inset

Schematic diagram showing MODFLOW 6 components.
 The GwfModelType and the GwfExchangeType are described in Langevin and
 others (2017).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Overall structure of the modeling with flopy
\end_layout

\begin_layout Standard
Flopy builds around the idea of a simulation which is incorporated in a
 
\emph on
sim-module
\emph default
 to which an arbitrary number of models may be coupled, each with their
 own packages and parameters.
 To date (2022), only Modflow may be coupled, but other (future) models
 could be as well.
\end_layout

\begin_layout Standard
This leads to instantiation of an object `
\emph on
sim
\emph default
` that is instantiated using `
\emph on
flopy.mf6.MFSimulation
\emph default
` as shown by the code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# set up simulation and basic packages
\end_layout

\begin_layout Plain Layout

name = "tutorial02_mf6"
\end_layout

\begin_layout Plain Layout

sim = flopy.mf6.MFSimulation(sim_name=name, sim_ws=".")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The simulation gets a name and a working directory (ws = workspace).
 The latter reference may be relative or absolute.
\end_layout

\begin_layout Standard
`
\emph on
sim
\emph default
` is an Flpy/Python object with over than 50 properties and methods with
 default values.
 The instantiation requires essentially its `
\emph on
sim_name
\emph default
`, `
\emph on
sim_ws
\emph default
` and `
\emph on
exe_name
\emph default
`.
 The latter two may be given as relative or full paths.
 All other parameters take their default values if not overwritten in the
 initiation call.
\end_layout

\begin_layout Part
Philosopy in setting up an MF6 groundwater flow model
\end_layout

\begin_layout Section
Keep spatial data separate from grid data
\end_layout

\begin_layout Standard
A groundwater model consists of Layer properties, boundary conditions, time
 in the form of stress periods and time steps, and properties and a model
 grid.
\end_layout

\begin_layout Standard
The grid will be generally separated from the problem to be solved.
 It is designed to match the desired spacial accuracy, both in defining
 spatial properties such as extent and properties of layers and boundary
 conditions, as well ot mach the desired accuracy of the simulation result.
 Any given problem can be solved using many different model networks.
 It is a good idea to keep the network independent of the underlying model
 data.
\end_layout

\begin_layout Standard
Spatial data would preferably be specified in spatial terms, i.e.
 using a tool such as a GIS, unless it is trivially simple as often in the
 case of a cross section of a simple book example.
 Spatial data may be specified in a GIS using a spatial database or shapefiles.
 Such shapefiles define both the spatial extent of the layer to be included
 while its properties are stored in the fields of the records, with one
 record per shape.
 The Id of the shape can be its name or just a number.
 The properties may refer to a separate table that relaters property name
 to actual value, thus allowing for eazy simulation of different scenario's
 with the same setup but different property values.
\end_layout

\begin_layout Standard
Spatial data in shapes may be intersected with the grid to transfer property
 values to model cells.
 This can be done in different ways.
 The simplest method is to select the centers of the cells and get the property
 value of the property shape that the center falls into.
 A more detailed version of the same method is to select more points per
 cell repeat the process and average over property values of de points of
 the cell.
 A more sophisticated method would use true intersection of shapes and cells
 and use the surface area of the intersected shapes to get contribution
 of values for each cell.
 This seems more complicated and will demand more computer resources, but
 can be done in most cases.
\end_layout

\begin_layout Standard
Then there are the boundary conditions.
 These are often associated with points in the ase of well or sources or
 sinks in geneal or lines as in the case of shores, rivers ditches and so
 on.
 These features hardly have an areal surface.
 At least lines are lines and can be intersected with areal cells to derive
 the the length of suraface are of for instance rivers intersection with
 cells.
 The method to be employed may vary depending on whether the boundary is
 regarded a line or a surface as in the case of a wide river.
 In the latter case, one could also define such a wide river by two lines,
 its left and right shore.
 Nevertheless, in the case of very wide rivers and at least in lakes, the
 surface area is important and should be dealt with as such in a way that
 is equivalent to the method to transfer spatial layer information to model
 cells.
\end_layout

\begin_layout Standard
The data so far would preferably be specified through a GIS like QGIS and
 would be automated using it's programming functionality.
 However, other approaches are feasible, like using Geopandas.
 This Python module works like Pandas but has the shape information stored
 in a separate column.
 Manipolation of the data stored in several Geopandas DataFrames is possible
 using Geopandas spatial functionality.
 A Geopandas DataFrame is equivalent to a s shapefile and shapefiles can
 be read into and written from Geopandas directly.
 Geopandas is an extra layer between GIS and our groundwater model.
 However knowing Pandas it is familiar to Python users and steps over the
 need to learn how to automate QGIS itself.
\end_layout

\begin_layout Standard
It may be useful to know how GeoDatabases can be used and skip using shapefiles
 altogether.
 The GeoDatabase that also is the preferable means of project storage in
 QGIS can hold all spatial data pertaining to a given groundwater problem.
 This means no more hasseling with shapefiles.
\end_layout

\begin_layout Section
MF6 preferred Grid
\end_layout

\begin_layout Standard
Modflow 6 can use the well know Modflow 5 structured grid, which consists
 of straight rows and columns in the plane, while the thickness in the vertical
 direction may vary for each row-column defined cell-column.
 Each cell is connected to its 6 neighboring cells, execpt of cells along
 the grid boundaries.
 The advanatage of this type of grid is that the location and connetions
 of each and every cell are known beforehand just by their layer-row-col
 number combination.
 With a structured grid it is straightforward to interpret tables of property
 data as each row and column in the table corresponds to the same row and
 column of the spatial grid.
 Flows between cells are also directly implied by the tables generated by
 Modflow that show the FlowLowerFace (FLF) FlowFrontFace (FFF) and the FlowRight
Face (FRF).
 It's easy to these tables with those showing the net external cell-inflow
 from Genral Head Boundaries, River Boundaries, Drainage, Wells, Recharge,
 Evapotranspiration and cell-storage to compute the water budget for each
 cell along the simulation, obtaining the water budget like the separate
 Budget program does.
 Using the grid cell dimensions, also specific dischages across cell faces
 can be readily computed from these Modflow-generated tables.
 Hence a structured grid is very convenient be it also limited in its flexibilit
y.
\end_layout

\begin_layout Standard
Modflow 6 also offers a VDIS grid.
 In this grid, the layers extent over the full area as is the case with
 the structured grid and layer thickness may vary from cell to cell.
 However, in plane view, the grid is defined by general polygons, defined
 by their nodes and the side-to-side connection between adjacent cells/polygons.
 Although this provides excellent flexibility to define the grid in the
 plane, from the user point of view, the easily visual relation between
 cell number and is location in space is lost as well as the connection
 between cells just given a data table with values.
 We now need a GIS or an drawing module to visualize the grid.
 While this is perfectly feasible, it is also be big disadvantage from the
 user point of view.
 Therefore, we will use the VDIS grid for the avantages that it has in the
 Modflow 6 context but will keep the cells ordered in rows and columns as
 in the structured grid.
 However these rows and columns no longer have to be straight with fixed
 row height and column width within in each row and column.
 These widths and heights may vary along the rows and collumns in the plane.
 A simple VDIS grid would be a wedge representing an axially symmetric model
 to so pumping test analysis.
 Hence, with this limited VDIS approach, the grid can be more easily adapted
 and bended along spatial boundaries, yet it is not as flexible as the VDIS
 grid offers.
 In our case, each cell is an arbitrary quadrangle in the plane and cells
 are ordered in rows and columns as was the case in the structured grid
 of Modflow 5.
 This keeps modeling with VDIS in MF6 conceptually friendly form the user's
 perspective.
\end_layout

\begin_layout Standard
Of couse, there is nothing wrong with utilizing the full freedom that VDIS
 offers and for a large project with lots of area that need local refinement
 it is still the best way to go.
 But very often we don't need this in which case the above simplified approach
 may be a conceptual advantage.
\end_layout

\begin_layout Standard
This conceptual advantage my count even more when considering the truely
 unstructured grid that Modflow 6 offers.
 Here the cells are defined by nodes and connections between cells, which
 all have to be provide by the user.
 This is conceptually ever more difficult as the user also has to provide
 the conductances between the cells, which have to be computed in advance
 one way or the other.
 For a truly unstructured 3D grid, even a regular GIS may not be a sufficient
 aid to handle it, let alone to verify the input.
 Because in this fully 3D unstructured grid no connection is implied by
 the grid and, therefore any cell can be connected to any other cell, and
 any cell can be connected to an arbitrary number of other cells.
 This provides truly freedom in defining the grid, and allows water transfer
 from one end of the model to the other without direct spatial contact between
 cells, its spatial complexity it is deemed to be usefull only to very specific
 projects.
 Even then, in most cases, the VDIS approach outlined above may prove beneficial
 in practice use to the reduced conceptual burden.
\end_layout

\begin_layout Standard
The VDIS grid with cells ordered in rows and columns can be readily defined
 by the possibly curved gridlines that define the rows and columns.
 Such grid lines can be defined in QGIS with a limited number of points
 used to interpolate the curved rows and columns.
 Examples will be given below.
 Mathematical coordinate transformations from rectangular grid may also
 be convenient in some cases.
\end_layout

\begin_layout Section
Properties
\end_layout

\begin_layout Standard
A Modflow model, be it an MF5 or an MF6 model, is characterized by a large
 number of properties, such as layer types, computation methods, simulater
 parameter values and so on.
 Most are specific to a modflow package.
 The total number of such properties is over 200.
 Most properties will usually always be the same, but some need to be adapted
 to the problem at hand; for instance, the number of inner and outer iterations,
 the type of each layer.
\end_layout

\begin_layout Standard
It was found useful and convenient to store all default parameters in an
 Excel Workbook.
 The sheet 'MF5' then hold those for Modflow 5, and the sheet 'MF6' those
 for the MF6 with VDIS grid.
 This sheet is then read into a Python dictionary, where the first-level
 key corresponds with a package name which has as item another dictionary
 in which the keys pertain to the parameters within the packages.
 It is then convenient when calling the flopy modules for each of the packages
 to be used in the simulation to provide it with default parameters from
 the spreadsheet.
 In a subsequent step, these parameters may be (partially or wholly) overwritten
 by parameters that are specific to the problem at hand.
\end_layout

\begin_layout Section
Visualization
\end_layout

\begin_layout Standard
Some routines to show the contours of the comoputed head of the layers,
 show the parameter values of the layers, show the location and type of
 boundary condition for cells are also useful.
 The same is true for plotting cross sections along (curved) rows and collumns
 of choice.
\end_layout

\begin_layout Section
Thoughts
\end_layout

\begin_layout Standard
Can a full Modflow model be conveniently stored in a spatial database?
\end_layout

\begin_layout Standard
Can the basis structure of the model be read from the meta data of the spatial
 database?
\end_layout

\begin_layout Standard
Can the prodcedures to work with models be generalized into a standard way
 to work with it? And store and represent the data?
\end_layout

\begin_layout Standard
Can the experience gained be conveninently stored in a document and possibly
 also in a Jupyter notebook?
\end_layout

\begin_layout Standard
In every project the way to use the data and show it should be demonstrated
 in Jupyter notebooks, so as to remember it for the future.
\end_layout

\begin_layout Standard
Layer info can be stored in grid objects in the spatial database.
 How to generate them easily?
\end_layout

\begin_layout Standard
Should we not alway directly work work with coordinates and define a standard
 SSRI beforehand with any project.
 If we don't need one, we can always choose a dummy one such as Zandwijk
 Suriname as a kind of NULL SSRI.
\end_layout

\begin_layout Standard
How deal with time data, time series etc?
\end_layout

\begin_layout Standard
How make use of Dinoloket as a Datawarehouse?
\end_layout

\begin_layout Standard
What about GeoJason? Shouldn't be used.
 Is slower than shapefiles and limited in size.
\end_layout

\begin_layout Standard
Use 
\emph on
Geopackage
\emph default
.
 Can be done using 
\emph on
GeoPandas
\emph default
, 
\emph on
Shapely, Rasterio
\emph default
 and 
\emph on
Fiona
\emph default
.
 Geopackage: OSG standard spatial data and store as one file in SQLite3.
\end_layout

\begin_layout Subsection
Geopandas (from https://geopandas.org/en/stable/)
\end_layout

\begin_layout Standard
GeoPandas is an open source project to make working with geospatial data
 in python easier.
 GeoPandas extends the datatypes used by pandas to allow spatial operations
 on geometric types.
 Geometric operations are performed by shapely.
 Geopandas further depends on fiona for file access and matplotlib for plotting.
\end_layout

\begin_layout Subsection
Shapely (from https://shapely.readthedocs.io/en/stable/)
\end_layout

\begin_layout Standard
Manipulation and analysis of geometric objects in the Cartesian plane.
\end_layout

\begin_layout Standard
Shapely is a BSD-licensed Python package for manipulation and analysis of
 planar geometric objects.
 It is using the widely deployed open-source geometry library GEOS (the
 engine of PostGIS, and a port of JTS).
 Shapely wraps GEOS geometries and operations to provide both a feature
 rich Geometry interface for singular (scalar) geometries and higher-performance
 NumPy ufuncs for operations using arrays of geometries.
 Shapely is not primarily focused on data serialization formats or coordinate
 systems, but can be readily integrated with packages that are.
\end_layout

\begin_layout Subsection
Rasterio (access to geospatial raster data; from https://rasterio.readthedocs.io/e
n/stable/)
\end_layout

\begin_layout Standard
Geographic information systems use GeoTIFF and other formats to organize
 and store gridded raster datasets such as satellite imagery and terrain
 models.
 Rasterio reads and writes these formats and provides a Python API based
 on Numpy N-dimensional arrays and GeoJSON.
\end_layout

\begin_layout Subsection
FIona (from https://pypi.org/project/Fiona/)
\end_layout

\begin_layout Standard
Fiona streams simple feature data to and from GIS formats like GeoPackage
 and Shapefile.
\end_layout

\begin_layout Standard
Fiona can read and write real-world data using multi-layered GIS formats,
 zipped and in-memory virtual file systems, from files on your hard drive
 or in cloud storage.
 This project includes Python modules and a command line interface (CLI).
\end_layout

\begin_layout Standard
Fiona depends on GDAL but is different from GDAL’s own bindings.
 Fiona is designed to be highly productive and to make it easy to write
 code which is easy to read.
 
\end_layout

\begin_layout Section
Programming principles
\end_layout

\begin_layout Enumerate
KISS (Keep It Simple Stupid) Make it easy to come back after six month and
 get right back to work.
 It saves much needless suffering down the line.
\end_layout

\begin_layout Enumerate
Write DRY codde.
 (DRY = Don't Repeat Yourself).
 Instead of duplicating lines, try to find an algorithm that uses a loop
 instead.
 It's easier to debug one loop that handles 50 repetitions than 50 blocks
 of code that handle one repetition each.
\end_layout

\begin_layout Enumerate
Open/Closed.
 Make the code open to extension but closed to modification.
 Especially when releasing a library or framework that others will use.
 Relying on inheritance causes two major issues.
 The inheritance hierarchy can get messy in a hurry.
 You have less flexibility for dfning special-case behaviors.
 Composition programming is cleaner to write, easier to maintain, and allows
 for flexibility when defining behaviors.
 Each individual behavior is its own class.
 You can crate complex behaviors by combining individual behaviors.
\end_layout

\begin_layout Enumerate
Composition over inheritance, Objects with complex behaviors should contain
 instances of objects with individual behaviors.
 They should not inherit a class and add new behaviors.
 Wikipedia: In OOP, composition over inheritance is the principle that classes
 should favor polymorphic behavior and code reuse by their composition.
 I.e.
 by containing instances of other classes that implement the desired functionali
ty, over inheritance from a base or parent class.
 Ideally, all reuse can be achieved by assempling existing components, but
 in practice, inheritance if often needed to make new ones.
 Therefore, inheritance and object composition typically work hand in hand,
 as discussed in the book 
\begin_inset Quotes eld
\end_inset

Design Patterns
\begin_inset Quotes erd
\end_inset

 (1994).
 Inheritance should only be used to implement an 
\emph on
is-a
\emph default
 relationship; composition to implement a 
\emph on
has-a
\emph default
 relationship.
 Check Liskov's substitution principle, which says that an object of type
 
\emph on
Derived
\emph default
, which inherits from 
\emph on
Base
\emph default
, can replace an object of type 
\emph on
Base
\emph default
 without altering desirable properties of a program.
 Liskov's substitution principle is the most important guidline to determin
 if inheritance is the appropraite design solution.
 A simple test: Evaluation B is an A: does it make sense? Then evaluate
 A is a B: dies that make sense? If both do, then you should neer inherit
 those classes from one another! Example: A square is a rectangle, because
 its area is computed as hight times width with as a special condition height
 equals width.
 B rectangle is also a square because it's area is computed as height times
 width with as special condition that height and width can differ from each
 other.
 This is a none of the two should never be implemented as a subclass of
 the other.
 So if you can justify an inheritance relationship between two classes both
 ways, you shold not derive one class from another.
 If you do, the derived class may show weird behavior when the superclass
 is layer changed and the constraint of the derived class is no longer valid.
 Debugging such behavior may be hard.
\end_layout

\begin_layout Enumerate
Single responsibility.
 Every class or module in a program should only provide one specific functionali
ty.
 A class should have only one reason to change.
\end_layout

\begin_layout Enumerate
Separation of concerns.
 A program should be designed with different containers, and these containers
 should not have access to each other.
 (This is an absract version of Single Responsibility).
 Each piece of the code is kept completely indiependent.
\end_layout

\begin_layout Enumerate
YAGNI.
 You Aren't Going to Need It.
 Never code for functionality on the expectation that you may need something
 in the future.
 One of the most important principles of computer programming is to learn
 that you shouldn't try to solve a problem that does not exist.
 Don't think too far ahead at the expense of your current code batch.
\end_layout

\begin_layout Enumerate
Document your code.
 Use proper comments.
 Go the extra mile and leave comments anywhere you worry things become confusing
, especially when collaborating with others.
 Don't frustrate fellow deelopers.
\end_layout

\begin_layout Enumerate
Refactor.
 Code isn't going to be perfect the first time.
 Review and look for way to optimize (also in clarity), while keeping the
 results exactly the same.
\end_layout

\begin_layout Enumerate
Write clean, clear code at all costs.
 Good programmers and readable code go hand in hand.
 Leave comments where necessary, adhere to style guides and put yourself
 in the next guy's shous whenever possible.
\end_layout

\begin_layout Subsection
Conclusions
\end_layout

\begin_layout Enumerate
Look critically at the code to the extent inheritence is improperly used
 and whether composition or mixin classes should be prepared instead.
\end_layout

\begin_layout Enumerate
Look where external libraries can be used and should be used.
\end_layout

\begin_layout Enumerate
Make sure the local logic is put in preferably a single module.
\end_layout

\begin_layout Enumerate
Used Jupyter notebook as a GUI kind of to the underlying code, show its
 used and perhaps deal with scenarios in it.
 But may be not for scenarios or make using scenarios a separate notebook.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "Hughes et al (2017)"
key "MF6-Framework"
literal "false"

\end_inset

Hughes, J.D., Langevin, C.D., and Banta, E.R.
 (2017).
 Documentation for the MODFLOW 6 framework: U.S.
 Geological Survey Techniques and Methods, book 6, chap.
 A57, 42 p., https://doi.org/10.3133/tm6A57.
 30pp.
\end_layout

\end_body
\end_document
